""" Use python 3.7 """

from models.vk.backend import VkAdsBackend
from models.database import *
from models.vk.tools import get_token_and_user_id


class TargetingAssistant:
    """
    –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º VkAds.
    –î–µ–ª–∞–µ—Ç –≤—Å—é —á–µ—Ä–Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–π.


    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:

        user_id - int, –∞–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å—Å—è –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è,
                  —É —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –∞—Ä—Ç–∏—Å—Ç–∞
                  –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç

        login - str or int, –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞, —Ä–µ—á—å –æ –∫–æ—Ç–æ—Ä–æ–º —à–ª–∞ –≤—ã—à–µ

        password - str, –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞

        token - str, —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω—É–∂–Ω—ã –¥–æ—Å—Ç—É–ø—ã: ads, groups, offline

        artist_name - str, –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–µ–π–∫-–ø–∞–±–ª–∏–∫–∞,
                      –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏

        track_name - str, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞,
                     –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏

        artist_group_id - int, –∞–π–¥–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–±–ª–∏–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                          –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ä–∫-–ø–æ—Å—Ç–æ–≤

        cabinet_id - int, –∞–π–¥–∏ —Ä–µ–∫–∞–ª–º–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ), –≤ –∫–æ—Ç–æ—Ä–æ–º
                     –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è

        client_id - int, –∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
                    —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ cabinet_id –ø–µ—Ä–µ–¥–∞–Ω
                    –∞–π–¥–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None

        fake_group_id - int, –∞–π–¥–∏ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–∞–±–ª–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–ª–µ–π–ª–∏—Å—Ç—ã,
                        –ø–∞–±–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–æ—Å–∏—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å - –±—É–¥–µ—Ç
                        —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞–±–ª–∏–∫ —Å –∏–º–µ–Ω–µ–º –∞—Ä—Ç–∏—Å—Ç–∞)

        cover_path - str, –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
                     (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –æ–±–ª–æ–∂–∫–∞ —Ç—Ä–µ–∫–∞)

        citation - str, —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —Ç—Ä–µ–∫–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ –¥–∞—Ä–∫-–ø–æ—Å—Ç–æ–≤
                   (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ü–∏—Ç–∞—Ç—ã)

        campaign_budget - int, –ª–∏–º–∏—Ç –ø–æ –±—é–¥–∂–µ—Ç—É —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ä—É–±–ª—è—Ö
                          (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ç–∞–∫–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)

        music_interest_filter - –µ—Å–ª–∏ True, –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É "–º—É–∑—ã–∫–∞",
                                –µ—Å–ª–∏ False, —Ç–æ —ç—Ç–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –Ω–µ –±—É–¥–µ—Ç
                                (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - False)

    """
    def __init__(self, user_id, login, password, token, artist_name, track_name, artist_group_id=None, cabinet_id=None,
                 client_id=None, fake_group_id=None, cover_path=None, citation=None, campaign_budget=0,
                 music_interest_filter=False):

        self.user_id = user_id
        self.artist_name = artist_name
        self.track_name = track_name
        self.artist_group_id = artist_group_id
        self.cabinet_id = cabinet_id
        self.client_id = client_id
        self.music_interest_filter = music_interest_filter
        self.login = login
        self.password = password
        self.token = token
        self.Vk = VkAdsBackend(self.login, self.password, self.token)
        self.retarget = self.Vk.get_retarget(self.cabinet_id, self.client_id)
        self.fake_group_id = self.__check_group_id(fake_group_id)
        self.cover_path = cover_path
        self.playlist_urls = []
        self.post_text = self._create_post_text(citation)
        self.dark_posts = {}
        self.campaign_budget = campaign_budget
        self.campaign_id = None
        self.ads = {}
        self.ad_names = {}

    def __check_group_id(self, group_id):
        if group_id is None:
            return self.Vk.create_group(group_name=self.artist_name, user_id=self.user_id)
        else:
            return group_id

    def _create_post_text(self, citation):

        if isinstance(self.artist_group_id, int):
            group = f'public{self.artist_group_id}'
        elif isinstance(self.artist_group_id, str):
            group = self.artist_group_id
        else:
            raise TypeError('artist_group_id must be int (group id) or str (group short address)')

        if citation is None:
            text = f'–ü–†–ï–ú–¨–ï–†–ê\n' \
                   f' \n' \
                   f'@{group} ({self.artist_name.upper()} - {self.track_name})\n' \
                   f' \n' \
                   f'–°–ª—É—à–∞–π –≤ –í–öüëáüèª'
            return text
        else:
            text = f'–ü–†–ï–ú–¨–ï–†–ê\n' \
                   f' \n' \
                   f'@{group} ({self.artist_name.upper()} - {self.track_name})\n' \
                   f' \n' \
                   f'{citation}\n' \
                   f' \n' \
                   f'–°–ª—É—à–∞–π –≤ –í–öüëáüèª'
            return text

    def create_playlists(self):
        """
        –î–æ–±–∞–≤–ª–µ—Ç —Ç—Ä–µ–∫ –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –ø–∞–±–ª–∏–∫–∞, –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ,
        —Ä–∞–≤–Ω–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –±–∞–∑–∞–º —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∞.
        –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ—Ç –≤ –∞—Ä–≥—É–º–µ–Ω—Ç playlist_urls.

        """
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø—ã
        self.Vk.add_audio_in_group(group_id=self.fake_group_id,
                                   track_name=f'{self.artist_name} - {self.track_name}')
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        self.playlist_urls = self.Vk.create_playlists(group_id=self.fake_group_id, playlist_name=self.track_name,
                                                      cover_path=self.cover_path, count=len(self.retarget))

    def start_test(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –±–∞–∑–∞–º —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∞:

            1 - —Å–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ä–∞–Ω–µ–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ)
            2 - —Å–æ–∑–¥–∞–µ—Ç –¥–∞—Ä–∫-–ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –∞—Ä–≥—É–º–µ–Ω—Ç dark_posts –≤ –≤–∏–¥–µ
                {post_url: playlist_url}
            3 - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–µ –∞–π–¥–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç campaign_id –≤ –≤–∏–¥–µ int
            4 - —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –¥–∞—Ä–∫ –ø–æ—Å—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –∞—Ä–≥—É–º–µ–Ω—Ç ads –≤ –≤–∏–¥–µ
                {ad_id: playlist_url} –∏ –µ–≥–æ –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç

            –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫—Ä—É—Ç—è—Ç—Å—è
            –¥–æ –ª–∏–º–∏—Ç–∞ 100 —Ä—É–±–ª–µ–π –∫–∞–∂–¥–æ–µ.

        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        if not self.playlist_urls:
            self.create_playlists()

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ä–∫-–ø–æ—Å—Ç–æ–≤
        self.dark_posts = self.Vk.create_dark_posts(group_id=self.artist_group_id,
                                                    playlists=self.playlist_urls,
                                                    text=self.post_text)
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
        self.campaign_id = self.Vk.create_campaign(cabinet_id=self.cabinet_id, client_id=self.client_id,
                                                   campaign_name=f'{self.artist_name.upper()} / {self.track_name}',
                                                   money_limit=self.campaign_budget)
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        ads = self.Vk.create_ads(cabinet_id=self.cabinet_id, client_id=self.client_id,
                                 campaign_id=self.campaign_id,
                                 retarget=self.retarget,
                                 posts=list(self.dark_posts.keys()),
                                 music=self.music_interest_filter)
        self.ads = {ad_id: self.dark_posts[post_url] for ad_id, post_url in ads.items()}
        self.ad_names = self.Vk.ad_names

        print('–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')

    def get_ads_stat(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç–∞—Ç—É –≤ –≤–∏–¥–µ
        {ad_id: {'name': str, 'spent': float, 'reach': int, 'listens': int}}

        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±—ä–µ–∫—Ç–µ
        if not self.ads:
            raise RuntimeError('self.ads –ø—É—Å—Ç, —Å–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏–≤ start_test')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        ads_stat = self.Vk.get_ads_stat(cabinet_id=self.cabinet_id, ad_ids=list(self.ads.keys()),
                                        ad_names=self.ad_names)
        listens = self.Vk.get_listens(group_id=self.fake_group_id, playlist_name=self.track_name)

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        full_stat = {}
        for ad_id, ad_stat in ads_stat.items():
            stat = ad_stat.copy()
            playlist_url = self.ads[ad_id]
            stat['listens'] = listens[playlist_url]
            full_stat[ad_id] = stat

        return full_stat

    def delete_ads(self, ad_ids):
        """
        –£–¥–∞–ª—è–µ—Ç –æ–±—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Ö –∞–π–¥–∏ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ads.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.delete_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids)
        alive_ads = {}
        for ad_id, playlist_url in self.ads.items():
            if ad_id not in ad_ids:
                alive_ads[ad_id] = playlist_url
        self.ads = alive_ads
        print(f'–£–¥–∞–ª–µ–Ω–æ {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def unlimit_ads(self, ad_ids):
        """
        –£–±–∏—Ä–∞–µ—Ç –ª–∏–º–∏—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞.
        –õ—É—á—à–µ —Å–Ω–∏–º–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.limit_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids, limit=0)
        print(f'–°–Ω—è—Ç—ã –ª–∏–º–∏—Ç—ã –ø–æ –±—é–¥–∂–µ—Ç—É —Å {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def stop_ads(self, ad_ids):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.stop_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids)
        print(f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def start_ads(self, ad_ids):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.start_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids)
        print(f'–ó–∞–ø—É—â–µ–Ω–æ {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def update_cpm(self, cpm_dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –°–†–ú —É –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param cpm_dict:        dict - {ad_id: cpm}, cpm - float –≤ —Ä—É–±–ª—è—Ö —Å –∫–æ–ø–µ–π–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏

        """
        self.Vk.update_cpm(cabinet_id=self.cabinet_id, cpm_dict=cpm_dict)
        print(f'–û–±–Ω–æ–≤–ª–µ–Ω –°–†–ú —É {len(cpm_dict)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')


class TargetingManager:

    def __init__(self, login, password):
        self.user = self._check_account(login, password)
        self.Backend = VkAdsBackend(self.user.login, self.user.password, self.user.token)
        self.Assistant = None
        self.user_cabinets = self._check_user_cabinets()
        self.agency_cabinets = self._check_agency_cabinets()
        self.client_cabinets = self._check_client_cabinets()
        self.user_campaigns = self._check_user_campaigns()
        self.client_campaigns = self._check_client_campaigns()
        self.user_campaign_details = self._check_user_campaign_details() if self.user_campaigns else None
        self.client_campaigns_details = self._check_client_campaign_details() if self.client_campaigns else None

    def _check_account(self, login, password):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        """
        # –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–æ–≥–∏–Ω—É
        user = Users.get_or_none(Users.login == login)

        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤–Ω–æ—Å–∏—Ç—Å—è –≤ –ë–î
        if not user:
            token, user_id = get_token_and_user_id(login, password)
            user = Users.create(login=login, password=password, token=token, user_id=user_id)
            return user
        # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –µ—Å—Ç—å, –Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–∞—Ä–æ–ª–∏, –¥–æ–±—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –ë–î –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º
        elif user.password != password:
            token, user_id = get_token_and_user_id(login, password)
            user.password = password
            user.save()
            user.token = token
            user.save()
            return user
        # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –µ—Å—Ç—å –∏ –ø–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î
        else:
            return user

    def _check_user_cabinets(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    list - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ UserCabinets

        """
        # –ó–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –∫ API Vk
        user_cabinets_db = [x for x in UserCabinets.select().where(UserCabinets.owner == self.user)]
        cabinets_vk = self.Backend.get_cabinets()
        user_cabinets_vk = {}
        for cab_id, cab_info in cabinets_vk.items():
            if cab_info[1] == 'general':
                user_cabinets_vk[cab_id] = cab_info

        # –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –í–ö –±–æ–ª—å—à–µ, –≤ –ë–î –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
        if len(user_cabinets_vk) > len(user_cabinets_db):
            cabinets = []
            for cab_id, cab_info in user_cabinets_vk.items():
                if cab_id not in [x.cabinet_id for x in user_cabinets_db] or len(user_cabinets_db) == 0:
                    cab = UserCabinets.create(owner=self.user, cabinet_id=cab_id, cabinet_name=cab_info[0])
                    cabinets.append(cab)
            return cabinets
        # –ê –µ—Å–ª–∏ –Ω–µ –±–æ–ª—å—à–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –ë–î
        else:
            return user_cabinets_db

    def _check_agency_cabinets(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    list - —Å–ø–∏—Å–æ–∫ –æ–±—å–µ–∫—Ç–æ–≤ AgencyCabinets

        """
        # –ó–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –∫ API Vk
        agency_cabinets_db = [x for x in AgencyCabinets.select().where(AgencyCabinets.owner == self.user)]
        cabinets_vk = self.Backend.get_cabinets()
        agency_cabinets_vk = {}
        for cab_id, cab_info in cabinets_vk.items():
            if cab_info[1] == 'agency':
                agency_cabinets_vk[cab_id] = cab_info

        # –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –í–ö –±–æ–ª—å—à–µ, –≤ –ë–î –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
        if len(agency_cabinets_vk) > len(agency_cabinets_db):
            cabinets = []
            for cab_id, cab_info in agency_cabinets_vk.items():
                if cab_id not in [x.cabinet_id for x in agency_cabinets_db] or len(agency_cabinets_db) == 0:
                    cab = AgencyCabinets.create(owner=self.user, cabinet_id=cab_id, cabinet_name=cab_info[0])
                    cabinets.append(cab)
            return cabinets
        # –ê –µ—Å–ª–∏ –Ω–µ –±–æ–ª—å—à–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –ë–î
        else:
            return agency_cabinets_db

    def _check_client_cabinets(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    dict - {agency_cabinet_object: [client_cabinet_object_1, client_cabinet_object_2...]}

        """
        # –ü—Ä–æ—Ö–æ–¥ —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç—Å–∫–∏–º –∫–∞–±–∏–Ω–µ—Ç–∞–º –æ–±—ä–µ–∫—Ç–∞
        agency_clients = {}
        for agency in self.agency_cabinets:
            client_cabinets_db = [x for x in ClientCabinets.select().where(ClientCabinets.owner == agency)]
            client_cabinets_vk = self.Backend.get_clients(agency.cabinet_id)
            # –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –í–ö –±–æ–ª—å—à–µ, —Ç–æ –≤ –ë–î –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
            if len(client_cabinets_vk) > len(client_cabinets_db):
                clients_list = []
                for cl_name, cl_id in client_cabinets_vk.items():
                    if cl_id not in [x.cabinet_id for x in client_cabinets_db] or len(client_cabinets_db) == 0:
                        cl_cab = ClientCabinets.create(owner=agency, cabinet_id=cl_id, cabinet_name=cl_name)
                        clients_list.append(cl_cab)
                agency_clients[agency] = clients_list
            # –ê –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±–µ—Ä—É—Ç—Å—è –∫–∞–±–∏–Ω–µ—Ç—ã –∏–∑ –ë–î
            else:
                agency_clients[agency.cabinet_id] = client_cabinets_db

        return agency_clients

    def _check_user_campaigns(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–º–ø–∞–Ω–∏–π  –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –ò–∑ –í–ö –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –ü–û
            –ø–æ–¥–æ–π–¥—É—Ç —Ç–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ü–û, –∞ –æ–Ω–∏ –µ—Å—Ç—å
            –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    dict - {user_cabinet_object: [campaign_object_1, campaign_object_2...]}

        """
        user_campaigns = {}
        for cabinet in self.user_cabinets:
            cabinet_campaigns = [x for x in UserCampaigns.select().where(UserCampaigns.owner == cabinet)]
            user_campaigns[cabinet] = cabinet_campaigns
        return user_campaigns

    def _check_client_campaigns(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–º–ø–∞–Ω–∏–π –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –ò–∑ –í–ö –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –ü–û
            –ø–æ–¥–æ–π–¥—É—Ç —Ç–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ü–û, –∞ –æ–Ω–∏ –µ—Å—Ç—å
            –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    dict - {client_cabinet_object: [campaign_object_1, campaign_object_2...]}

        """
        client_campaigns = {}
        for cabinet in self.client_cabinets:
            cabinet_campaigns = [x for x in ClientCampaigns.select().where(ClientCampaigns.owner == cabinet)]
            client_campaigns[cabinet] = cabinet_campaigns
        return client_campaigns

    def _check_user_campaign_details(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–∞–º–ø–∞–Ω–∏–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –ò–∑ –í–ö –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –ü–û
            –ø–æ–¥–æ–π–¥—É—Ç —Ç–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ü–û, –∞ –æ–Ω–∏ –µ—Å—Ç—å
            –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    dict - {user_campaign_object: [user_campaign_detail_object_1, ...]}

        """
        campaign_details = {}
        for campaign in self.user_campaigns:
            details = [x for x in UserCampaignDetails.select().where(UserCampaignDetails.owner == campaign)]
            campaign_details[campaign] = details
        return campaign_details

    def _check_client_campaign_details(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–∞–º–ø–∞–Ω–∏–π –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –ò–∑ –í–ö –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –ü–û
            –ø–æ–¥–æ–π–¥—É—Ç —Ç–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ü–û, –∞ –æ–Ω–∏ –µ—Å—Ç—å
            –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        :return:    dict - {user_campaign_object: [user_campaign_detail_object_1, ...]}

        """
        campaign_details = {}
        for campaign in self.client_campaigns:
            details = [x for x in ClientCampaignDetails.select().where(ClientCampaignDetails.owner == campaign)]
            campaign_details[campaign] = details
        return campaign_details

    def _ads_from_db_for_continue_campaign(self, cabinet_type, campaign_name):

        # –î–æ—Å—Ç–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        if cabinet_type == 'user':
            campaign = UserCampaigns.select().where(UserCampaigns.campaign_name == campaign_name)
            ads = {x.ad_id: x.playlist_url for x in
                   UserCampaignDetails.select().where(UserCampaignDetails.owner == campaign)}
            ad_names = {x.ad_id: x.ad_name for x in
                        UserCampaignDetails.select().where(UserCampaignDetails.owner == campaign)}
            return ads, ad_names

        # –î–æ—Å—Ç–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        elif cabinet_type == 'client':
            campaign = ClientCampaigns.select().where(ClientCampaigns.campaign_name == campaign_name)
            ads = {x.ad_id: x.playlist_url for x in
                   ClientCampaignDetails.select().where(ClientCampaignDetails.owner == campaign)}
            ad_names = {x.ad_id: x.ad_name for x in
                        ClientCampaignDetails.select().where(ClientCampaignDetails.owner == campaign)}
            return ads, ad_names
        else:
            raise ValueError("cabinet_type –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 'user' –∏–ª–∏ 'client'")

    def _cabinet_id_for_continue_campaign(self, cabinet_type, campaign_name):

        # –î–æ—Å—Ç–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç –∏ –∫–∞–º–ø–∞–Ω–∏—é –∏–∑ –ë–î, –µ—Å–ª–∏ —Ä–µ—á—å –æ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        if cabinet_type == 'user':
            campaign = [x for x in UserCampaigns.select().where(UserCampaigns.campaign_name == campaign_name)][0]
            cabinet = UserCabinets.get_by_id(campaign.owner)
            return cabinet, campaign

        # –ï—Å–ª–∏ —Ä–µ—á—å –æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        elif cabinet_type == 'client':
            campaign = [x for x in ClientCampaigns.select().where(ClientCampaigns.campaign_name == campaign_name)][0]
            client_cabinet = ClientCabinets.get_by_id(campaign.owner)
            cabinet = AgencyCabinets.get_by_id(client_cabinet.owner)
            return cabinet, campaign

    def _new_user_campaign(self, artist_group_id, artist_name, cabinet, campaign_budget, citation, cover_path,
                           music_interest_filter, track_name):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
        self.Assistant = TargetingAssistant(user_id=self.user.user_id,
                                            login=self.user.login,
                                            password=self.user.password,
                                            token=self.user.token,
                                            artist_name=artist_name,
                                            track_name=track_name,
                                            artist_group_id=artist_group_id,
                                            cabinet_id=cabinet.cabinet_id,
                                            cover_path=cover_path,
                                            citation=citation,
                                            campaign_budget=campaign_budget,
                                            music_interest_filter=music_interest_filter)
        # –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç, –ø–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        self.Assistant.start_test()
        ads = self.Assistant.ads
        ad_names = self.Assistant.ad_names
        campaign_id = self.Assistant.campaign_id
        campaign_name = f'{artist_name.upper()} / {track_name}'

        # –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        new_campaign = UserCampaigns.create(owner=cabinet, campaign_id=campaign_id, campaign_name=campaign_name,
                                            artist_group=artist_group_id, fake_group=self.Assistant.fake_group_id)
        self.user_campaigns[cabinet].append(new_campaign)

        # –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        ads_insert = [{'owner': new_campaign, 'ad_id': ad_id, 'ad_name': ad_names[ad_id], 'playlist_url': playlist_url}
                      for ad_id, playlist_url in ads.items()]
        UserCampaignDetails.insert_many(ads_insert).on_conflict_replace().execute()

    def _new_client_campaign(self, agency_cabinet, artist_group_id, artist_name, campaign_budget, citation,
                             client_cabinet, cover_path, music_interest_filter, track_name):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
        self.Assistant = TargetingAssistant(user_id=self.user.user_id,
                                            login=self.user.login,
                                            password=self.user.password,
                                            token=self.user.token,
                                            artist_name=artist_name,
                                            track_name=track_name,
                                            artist_group_id=artist_group_id,
                                            cabinet_id=agency_cabinet.cabinet_id,
                                            client_id=client_cabinet.cabinet_id,
                                            cover_path=cover_path,
                                            citation=citation,
                                            campaign_budget=campaign_budget,
                                            music_interest_filter=music_interest_filter)
        # –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç, –ø–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        self.Assistant.start_test()
        ads = self.Assistant.ads
        ad_names = self.Assistant.ad_names
        campaign_id = self.Assistant.campaign_id
        campaign_name = f'{artist_name.upper()} / {track_name}'

        # –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        new_campaign = ClientCampaigns.create(owner=client_cabinet, campaign_id=campaign_id,
                                              campaign_name=campaign_name, artist_group=artist_group_id,
                                              fake_group=self.Assistant.fake_group_id)
        self.client_campaigns[client_cabinet].append(new_campaign)

        # –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        ads_insert = [{'owner': new_campaign, 'ad_id': ad_id, 'ad_name': ad_names[ad_id], 'playlist_url': playlist_url}
                      for ad_id, playlist_url in ads.items()]
        ClientCampaignDetails.insert_many(ads_insert).on_conflict_replace().execute()

    def start_new_campaign(self, artist_name, track_name, artist_group_id, cover_path=None, citation=None,
                           user_cabinet_name=None, agency_cabinet_name=None, client_cabinet_name=None,
                           music_interest_filter=False, campaign_budget=0):

        # –î–æ—Å—Ç–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        if user_cabinet_name:
            for x in self.user_cabinets:
                if x.cabinet_name == user_cabinet_name:
                    cabinet = x
                else:
                    raise ValueError(f'–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {user_cabinet_name}')
            # –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
            self._new_user_campaign(artist_group_id, artist_name, cabinet, campaign_budget, citation, cover_path,
                                    music_interest_filter, track_name)

        # –î–æ—Å—Ç–∞–µ—Ç –∞–≥–µ–Ω—Ç—Å–∫–∏–π –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç—ã
        elif agency_cabinet_name and client_cabinet_name:
            for x in self.agency_cabinets:
                if x.cabinet_name == agency_cabinet_name:
                    agency_cabinet = x
                    for y in self.client_cabinets[agency_cabinet]:
                        if y.cabinet_name == client_cabinet_name:
                            client_cabinet = y
                        else:
                            raise ValueError(f'–£ –∞–≥–µ–Ω—Ç—Å–≤–∞ {agency_cabinet_name} –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_cabinet_name}')
                else:
                    raise ValueError(f'–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ {agency_cabinet_name}')
            # –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –∞–≥–µ–Ω—Ç—Å–∫–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
            self._new_client_campaign(agency_cabinet, artist_group_id, artist_name, campaign_budget, citation,
                                      client_cabinet, cover_path, music_interest_filter, track_name)

    def continue_campaign(self, artist_name, track_name, cabinet_type='user'):

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
        campaign_name = f'{artist_name.upper()} / {track_name}'
        ads, ad_names = self._ads_from_db_for_continue_campaign(cabinet_type, campaign_name)
        cabinet, campaign = self._cabinet_id_for_continue_campaign(cabinet_type, campaign_name)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.Assistant = TargetingAssistant(user_id=self.user.user_id,
                                            login=self.user.login,
                                            password=self.user.password,
                                            token=self.user.token,
                                            artist_name=artist_name,
                                            track_name=track_name,
                                            cabinet_id=cabinet.cabinet_id,
                                            artist_group_id=campaign.artist_group,
                                            fake_group_id=campaign.fake_group)
        self.Assistant.ads = ads
        self.Assistant.ad_names = ad_names

    def get_ads_stat(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –≤ –≤–∏–¥–µ
        {ad_id: {'name': str, 'spent': float, 'reach': int, 'listens': int}}

        """
        return self.Assistant.get_ads_stat()

    def start_ads(self, ad_ids):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Assistant.start_ads(ad_ids)

    def stop_ads(self, ad_ids):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Assistant.stop_ads(ad_ids)

    def delete_ads(self, ad_ids):
        """
        –£–¥–∞–ª—è–µ—Ç –æ–±—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Ö –∞–π–¥–∏ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ads.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Assistant.delete_ads(ad_ids)

    def unlimit_ads(self, ad_ids):
        """
        –£–±–∏—Ä–∞–µ—Ç –ª–∏–º–∏—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞.
        –õ—É—á—à–µ —Å–Ω–∏–º–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Assistant.unlimit_ads(ad_ids)

    def update_cpm(self, cpm_dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –°–†–ú —É –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param cpm_dict:        dict - {ad_id: cpm}, cpm - float –≤ —Ä—É–±–ª—è—Ö —Å –∫–æ–ø–µ–π–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏

        """
        self.Assistant.update_cpm(cpm_dict)

# TODO  –î–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–Ω—Ç–æ–≤ –≤ VkGroupAudio
