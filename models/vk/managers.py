""" Use python 3.7 """


from models.vk.backend import VkAdsBackend


class MusicTargetingAssistant:
    """
    Use python 3.7

    –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º VkAds.
    –î–µ–ª–∞–µ—Ç –≤—Å—é —á–µ—Ä–Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–π.


    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:

        user_id - int, –∞–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å—Å—è –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è,
                  —É —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –∞—Ä—Ç–∏—Å—Ç–∞
                  –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç

        login - str or int, –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞, —Ä–µ—á—å –æ –∫–æ—Ç–æ—Ä–æ–º —à–ª–∞ –≤—ã—à–µ

        password - str, –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞

        token - str, —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω—É–∂–Ω—ã –¥–æ—Å—Ç—É–ø—ã: ads, groups, offline

        artist_name - str, –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–µ–π–∫-–ø–∞–±–ª–∏–∫–∞,
                      –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏

        track_name - str, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞,
                     –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏

        artist_group_id - int, –∞–π–¥–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–±–ª–∏–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                          –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ä–∫-–ø–æ—Å—Ç–æ–≤

        cabinet_id - int, –∞–π–¥–∏ —Ä–µ–∫–∞–ª–º–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ), –≤ –∫–æ—Ç–æ—Ä–æ–º
                     –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è

        client_id - int, –∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
                    —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ cabinet_id –ø–µ—Ä–µ–¥–∞–Ω
                    –∞–π–¥–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None

        fake_group_id - int, –∞–π–¥–∏ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–∞–±–ª–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–ª–µ–π–ª–∏—Å—Ç—ã,
                        –ø–∞–±–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–æ—Å–∏—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å - –±—É–¥–µ—Ç
                        —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞–±–ª–∏–∫ —Å –∏–º–µ–Ω–µ–º –∞—Ä—Ç–∏—Å—Ç–∞)

        cover_path - str, –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
                     (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –æ–±–ª–æ–∂–∫–∞ —Ç—Ä–µ–∫–∞)

        citation - str, —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —Ç—Ä–µ–∫–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ –¥–∞—Ä–∫-–ø–æ—Å—Ç–æ–≤
                   (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ü–∏—Ç–∞—Ç—ã)

        campaign_budget - int, –ª–∏–º–∏—Ç –ø–æ –±—é–¥–∂–µ—Ç—É —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ä—É–±–ª—è—Ö
                          (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ç–∞–∫–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)

        music_interest_filter - –µ—Å–ª–∏ True, –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É "–º—É–∑—ã–∫–∞",
                                –µ—Å–ª–∏ False, —Ç–æ —ç—Ç–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –Ω–µ –±—É–¥–µ—Ç
                                (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - False)

    """
    def __init__(self, user_id, login, password, token, artist_name, track_name, artist_group_id, cabinet_id,
                 client_id=None, fake_group_id=None, cover_path=None, citation=None, campaign_budget=0,
                 music_interest_filter=False):

        self.user_id = user_id
        self.artist_name = artist_name
        self.track_name = track_name
        self.artist_group_id = artist_group_id
        self.cabinet_id = cabinet_id
        self.client_id = client_id
        self.music_interest_filter = music_interest_filter
        self.login = login
        self.password = password
        self.token = token
        self.Vk = VkAdsBackend(self.login, self.password, self.token)
        self.retarget = self.Vk.get_retarget(self.cabinet_id, self.client_id)
        self.fake_group_id = self.__check_group_id(fake_group_id)
        self.cover_path = cover_path
        self.playlist_urls = []
        self.post_text = self._create_post_text(citation)
        self.dark_posts = {}
        self.campaign_budget = campaign_budget
        self.campaign_id = None
        self.ads = {}

    def __check_group_id(self, group_id):
        if group_id is None:
            return self.Vk.create_group(group_name=self.artist_name, user_id=self.user_id)
        else:
            return group_id

    def _create_post_text(self, citation):

        if isinstance(self.artist_group_id, int):
            group = f'public{self.artist_group_id}'
        elif isinstance(self.artist_group_id, str):
            group = self.artist_group_id
        else:
            raise TypeError('artist_group_id must be int (group id) or str (group short address)')

        if citation is None:
            text = f'–ü–†–ï–ú–¨–ï–†–ê\n' \
                   f' \n' \
                   f'@{group} ({self.artist_name.upper()} - {self.track_name})\n' \
                   f' \n' \
                   f'–°–ª—É—à–∞–π –≤ –í–öüëáüèª'
            return text
        else:
            text = f'–ü–†–ï–ú–¨–ï–†–ê\n' \
                   f' \n' \
                   f'@{group} ({self.artist_name.upper()} - {self.track_name})\n' \
                   f' \n' \
                   f'{citation}\n' \
                   f' \n' \
                   f'–°–ª—É—à–∞–π –≤ –í–öüëáüèª'
            return text

    def create_playlists(self):
        """
        –î–æ–±–∞–≤–ª–µ—Ç —Ç—Ä–µ–∫ –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –ø–∞–±–ª–∏–∫–∞, –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ,
        —Ä–∞–≤–Ω–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –±–∞–∑–∞–º —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∞.
        –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ—Ç –≤ –∞—Ä–≥—É–º–µ–Ω—Ç playlist_urls.

        """
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø—ã
        self.Vk.add_audio_in_group(group_id=self.fake_group_id,
                                   track_name=f'{self.artist_name} - {self.track_name}')
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        self.playlist_urls = self.Vk.create_playlists(group_id=self.fake_group_id, playlist_name=self.track_name,
                                                      cover_path=self.cover_path, count=len(self.retarget))

    def start_test(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –±–∞–∑–∞–º —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∞:

            1 - —Å–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ä–∞–Ω–µ–µ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ)
            2 - —Å–æ–∑–¥–∞–µ—Ç –¥–∞—Ä–∫-–ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –∞—Ä–≥—É–º–µ–Ω—Ç dark_posts –≤ –≤–∏–¥–µ
                {post_url: playlist_url}
            3 - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–µ –∞–π–¥–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç campaign_id –≤ –≤–∏–¥–µ int
            4 - —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –¥–∞—Ä–∫ –ø–æ—Å—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –∞—Ä–≥—É–º–µ–Ω—Ç ads –≤ –≤–∏–¥–µ
                {ad_id: playlist_url}

            –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫—Ä—É—Ç—è—Ç—Å—è
            –¥–æ –ª–∏–º–∏—Ç–∞ 100 —Ä—É–±–ª–µ–π –∫–∞–∂–¥–æ–µ.

        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        if not self.playlist_urls:
            self.create_playlists()

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ä–∫-–ø–æ—Å—Ç–æ–≤
        self.dark_posts = self.Vk.create_dark_posts(group_id=self.artist_group_id,
                                                    playlists=self.playlist_urls,
                                                    text=self.post_text)
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
        self.campaign_id = self.Vk.create_campaign(cabinet_id=self.cabinet_id, client_id=self.client_id,
                                                   campaign_name=f'{self.artist_name.upper()} / {self.track_name}',
                                                   money_limit=self.campaign_budget)
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        ads = self.Vk.create_ads(cabinet_id=self.cabinet_id, client_id=self.client_id,
                                 campaign_id=self.campaign_id,
                                 retarget=self.retarget,
                                 posts=list(self.dark_posts.keys()),
                                 music=self.music_interest_filter)
        self.ads = {ad_id: self.dark_posts[post_url] for ad_id, post_url in ads.items()}

        print('–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')

    def get_ads_stat(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç–∞—Ç—É –≤ –≤–∏–¥–µ
        {ad_id: {'name': str, 'spent': float, 'reach': int, 'listens': int}}

        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±—ä–µ–∫—Ç–µ
        if not self.ads:
            raise RuntimeError('self.ads –ø—É—Å—Ç, —Å–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏–≤ start_test')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        ads_stat = self.Vk.get_ads_stat(cabinet_id=self.cabinet_id, ad_ids=list(self.ads.keys()))
        listens = self.Vk.get_listens(group_id=self.fake_group_id, playlist_name=self.track_name)

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        full_stat = {}
        for ad_id, ad_stat in ads_stat.items():
            stat = ad_stat.copy()
            playlist_url = self.ads[ad_id]
            stat['listens'] = listens[playlist_url]
            full_stat[ad_id] = stat

        return full_stat

    def delete_ads(self, ad_ids):
        """
        –£–¥–∞–ª—è–µ—Ç –æ–±—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Ö –∞–π–¥–∏ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ads.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.delete_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids)
        alive_ads = {}
        for ad_id, playlist_url in self.ads.items():
            if ad_id not in ad_ids:
                alive_ads[ad_id] = playlist_url
        self.ads = alive_ads
        print(f'–£–¥–∞–ª–µ–Ω–æ {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def unlimit_ads(self, ad_ids):
        """
        –£–±–∏—Ä–∞–µ—Ç –ª–∏–º–∏—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞.
        –õ—É—á—à–µ —Å–Ω–∏–º–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.limit_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids, limit=0)
        print(f'–°–Ω—è—Ç—ã –ª–∏–º–∏—Ç—ã –ø–æ –±—é–¥–∂–µ—Ç—É —Å {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def stop_ads(self, ad_ids):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.stop_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids)
        print(f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def start_ads(self, ad_ids):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param ad_ids:      list of int - —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        """
        self.Vk.start_ads(cabinet_id=self.cabinet_id, ad_ids=ad_ids)
        print(f'–ó–∞–ø—É—â–µ–Ω–æ {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')

    def update_cpm(self, cpm_dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –°–†–ú —É –æ–±—ä—è–≤–ª–µ–Ω–∏–π

        :param cpm_dict:        dict - {ad_id: cpm}, cpm - float –≤ —Ä—É–±–ª—è—Ö —Å –∫–æ–ø–µ–π–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏

        """
        self.Vk.update_cpm(cabinet_id=self.cabinet_id, cpm_dict=cpm_dict)
        print(f'–û–±–Ω–æ–≤–ª–µ–Ω –°–†–ú —É {len(cpm_dict)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
